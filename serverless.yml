service: complaints-portal

# # You can pin your service to only deploy with a specific Serverless version
# # Check out our docs for more details
# # frameworkVersion: "=X.X.X"
custom:
  secrets: ${file(secrets.json)}
  serverless-offline:
    port: 4200
    host: 0.0.0.0
    region: "eu-west-1"
    useSeparateProcesses: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      customers:
        sources:
          - table: ${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}
            sources: ["./offline/migrations/fake-customers.json"]
    migration:
      dir: offline/migrations
  serverless-offline-sns:
    port: 4002
    debug: false
    accountId: 108610331730
  customDomain:
    domainName: ${self:custom.secrets.DOMAIN} 
    basePath: 'api'
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: 'nowaitr.com'
    endpointType: 'regional'
  sesTemplatesConfigFile: './email/template.js'  
  
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.secrets.NODE_ENV}
  region: "eu-west-1"
  environment: 
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DYNAMODB_COMPLAINTS_TABLE: ${self:service}-complaints-${opt:stage, self:provider.stage}
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customers-${opt:stage, self:provider.stage}
    FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
    REPLY_TO_EMAIL: ${self:custom.secrets.REPLY_TO_EMAIL}
    RECAPTCHA_URL: "https://www.google.com/recaptcha/api/siteverify"
    RECAPTCHA_SITE_KEY: ${self:custom.secrets.RECAPTCHA_SITE_KEY} 
    RECAPTCHA_SECRET_KEY: ${self:custom.secrets.RECAPTCHA_SECRET_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COMPLAINTS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COMPLAINTS_TABLE}/index/*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}/index/*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "ses:SendTemplatedEmail"
        
functions:
  graphql:
    handler: complaints/handler.server
    events:
    - http:
        path: /
        method: post
        cors: true
        response:
          headers:
            Access-Control-Allow-Origin: "'*'"
  playground:
    handler: complaints/handler.playground
    events:
    - http:
        path: /
        method: get
        cors: true
        response:
          headers:
            Access-Control-Allow-Origin: "'*'"
        
  sendComplaintRegistrationEmail:
    handler: email/handler.sendComplaintRegistrationEmail
    events:
      - sns: complaintCreated
  
  sendComplaintRegistrationEmailOriginal:
    handler: email/handler.sendComplaintRegistrationEmailOriginal
    events:
      - sns: complaintCreated
      
  landingPage:
    handler: frontend/handler.landingPage
    events:
      - http:
          method: get
          path: "landing-page"
      
resources:
  Resources:
    ComplaintsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # @TODO Change this to retain in future
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: originalCustomerAccountId
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_COMPLAINTS_TABLE}
        GlobalSecondaryIndexes:
        - IndexName: accountid
          KeySchema:
          - AttributeName: originalCustomerAccountId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    CustomersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # @TODO Change this to retain in future
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: originalCustomerAccountId
          AttributeType: S
        - AttributeName: originalCustomerEmail
          AttributeType: S
        - AttributeName: originalCustomerDateOfBirth
          AttributeType: S
        - AttributeName: originalCustomerPostCode
          AttributeType: S
        - AttributeName: originalCustomerMobilePhoneNumber
          AttributeType: S
        KeySchema:
        - AttributeName: originalCustomerAccountId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}
        GlobalSecondaryIndexes:
        - IndexName: originalCustomerEmailDateOfBirth
          KeySchema:
          - AttributeName: originalCustomerEmail
            KeyType: HASH
          - AttributeName: originalCustomerDateOfBirth
            KeyType: RANGE
          Projection:
            NonKeyAttributes:
            - originalCustomerAccountId
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: originalCustomerPostCodeDateOfBirth
          KeySchema:
          - AttributeName: originalCustomerPostCode
            KeyType: HASH
          - AttributeName: originalCustomerDateOfBirth
            KeyType: RANGE
          Projection:
            NonKeyAttributes:
            - originalCustomerAccountId
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: originalCustomerMobilePhoneNumberDateOfBirth
          KeySchema:
          - AttributeName: originalCustomerMobilePhoneNumber
            KeyType: HASH
          - AttributeName: originalCustomerDateOfBirth
            KeyType: RANGE
          Projection:
            NonKeyAttributes:
            - originalCustomerAccountId
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    
      
plugins:
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline
  - serverless-domain-manager
  - '@haftahave/serverless-ses-template'
     